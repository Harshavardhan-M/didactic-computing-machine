package me.benetis

object Problems {

  /**
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
   */
  def problem1(): String = {
    (1 until 1000).filter(p => p % 3 == 0 || p % 5 == 0).sum.toString
  }

  /**
  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   */
  def problem2(): String = {
    def fib(n: Int): Int = n match {
      case 0 => 0
      case 1 => 1
      case _ => fib(n-1) + fib(n-2)
    }

    def generate(n: Int): Int = {
      val count = fib(n)
      if(count > 4000000)
        0
      else if(count % 2 != 0)
        generate(n + 1)
      else
        count + generate(n + 1)
    }

    generate(0).toString
  }

}
